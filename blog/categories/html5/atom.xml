<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HTML5 | Victory's Blog]]></title>
  <link href="http://eniac0001.github.io/blog/blog/categories/html5/atom.xml" rel="self"/>
  <link href="http://eniac0001.github.io/blog/"/>
  <updated>2014-02-18T15:59:13+08:00</updated>
  <id>http://eniac0001.github.io/blog/</id>
  <author>
    <name><![CDATA[VictoryZhang(CN)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[译文] 使用 HTML5 Canvas 创建一个拾色器]]></title>
    <link href="http://eniac0001.github.io/blog/blog/2013/05/17/color-picker-canvas/"/>
    <updated>2013-05-17T21:47:00+08:00</updated>
    <id>http://eniac0001.github.io/blog/blog/2013/05/17/color-picker-canvas</id>
    <content type="html"><![CDATA[<blockquote><p>创建 Canvas 应用是一件有意思且新奇的事情，甚至可以创建游戏；Canvas 在大多数的桌面和手机浏览器中都能够很好的支持，是比使用 Flash 更可行的解决方案；</p></blockquote>

<p>本例中使用HTML5中 Canvas 来创建一个简易的拾色器（color picker），在此过程中，不需要任何的 Flash，有一个“文本编辑器”和一个“浏览器”即可。</p>

<p>开始之前，您可以在“<a href="http://netdna.webdesignerdepot.com/uploads7/how-to-create-a-color-picker-with-html5-canvas/demo/"><strong>这里</strong></a>”看看我们将要创建的应用的效果，您也可以在“<a href="http://netdna.webdesignerdepot.com/uploads7/how-to-create-a-color-picker-with-html5-canvas/demo/demo.zip"><strong>这里</strong></a>”下载源文件。
<em>如果您在本地测试这个实例，最好不要使用 Chrome 浏览器，因为 Chrome 的安全模块要求 script 只在线上工作（only work online）。</em></p>

<h3>HTML</h3>

<p>在这个例子中，HTML 使用的不多，我们需要做的就是创建<strong>一个Canvas</strong>，然后有<strong>两个文本框</strong>用于放置所点击颜色的 RGB 表示和 16 进制颜色值表示；代码如下:</p>

<pre><code>&lt;canvas width="600" height="440" id="canvas_picker"&gt;&lt;/canvas&gt;
&lt;div id="hex"&gt;HEX: &lt;input type="text"&gt;&lt;/input&gt;&lt;/div&gt;
&lt;div id="rgb"&gt;RGB: &lt;input type="text"&gt;&lt;/input&gt;&lt;/div&gt;
</code></pre>

<p>由于我们在一张背景图片拾取颜色，因此把 Canvas 的高度和宽度设置成了背景图片的高度和宽度；所点击的颜色显示在两个文本框中；</p>

<p>由于我们要用到 jQuery，因此代码中要包含jQuery库。</p>

<h3>JavaScript</h3>

<p>要使拾色器工作，首先，我们需要做的是获取 Canvas 和它的上下文，我们可以用一句代码，像这样：</p>

<pre><code>var canvas = document.getElementById('canvas_picker').getContext('2d');
</code></pre>

<p>紧接着，我们需要做的就是给 Canvas 元素设置一张背景图片，此过程中，我们需要创建一个 image 对象，并设置其 URL 属性，当图片加载完毕后，加载到 Canvas 中，代码如下：</p>

<pre><code>var img = new Image();
img.src = 'image.jpg';
$(img).load(function(){
    canvas.drawImage(img,0,0);
});
</code></pre>

<p>下面我们应该考虑的是：当鼠标点击事件在 Canvas 中发生时，我们应该捕捉到该事件，并且获取用户点击鼠标的位置，代码可以这样写：</p>

<pre><code>$('#canvas_picker').click(function(event){
    var x = event.pageX - this.offsetLeft;
    var y = event.pageY - this.offsetTop;
});
</code></pre>

<p>这两句代码的意思是获取用户点击的位置，我们所需做的就是获取其坐标，并减去 Canvas 元素的偏移量(offsetLeft 和 offsetTop)； 这样就得到了相对于 Canvas 用户点击的位置；</p>

<p>下一步就是获取用户点击位置的 RGB 值，我们需要用到 getImageData() 函数，并把上面代码中 x，y 值传递进去：</p>

<pre><code>$('#canvas_picker').click(function(event){
    var x = event.pageX - this.offsetLeft;
    var y = event.pageY - this.offsetTop;

    var imgData = canvas.getImageData(x, y, 1, 1).data;
    var R = imgData[0];
    var G = imgData[1];
    var B = imgData[2];

});
</code></pre>

<p>接下来就是把 RGB 值显示给用户：</p>

<pre><code>$('#canvas_picker').click(function(event){
    var x = event.pageX - this.offsetLeft;
    var y = event.pageY - this.offsetTop;

    var imgData = canvas.getImageData(x, y, 1, 1).data;
    var R = imgData[0];
    var G = imgData[1];
    var B = imgData[2];

    var rgb = R + ',' + G + ',' + B;
    $('#rgb input').val(rgb);

});
</code></pre>

<p>现在已经可以得到用户点击位置的 RGB 值，不过，为了有更好的体验，我们同时显示点击位置的 16 进制值颜色值，把 RGB 值转换为 16 进制颜色值的代码如下：</p>

<pre><code>function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}
function toHex(n) {
    n = parseInt(n,10);
    if (isNaN(n)) 
        return "00";
    n = Math.max(0,Math.min(n,255));
    return "0123456789ABCDEF".charAt((n-n%16)/16) + "0123456789ABCDEF".charAt(n%16);
}
</code></pre>

<p>我们已经完成了本例子的大部分功能，下面就是把16进制颜色值显示在文本框中：</p>

<pre><code>var hex = rgbToHex(R,G,B);
$('#hex input').val('#' + hex);
</code></pre>

<h3>完整代码</h3>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;拾色器事例代码&lt;/title&gt;
    &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;canvas width="600" height="440" id="canvas_picker"&gt;&lt;/canvas&gt;
&lt;div id="hex"&gt;HEX: &lt;input type="text"&gt;&lt;/input&gt;&lt;/div&gt;
&lt;div id="rgb"&gt;RGB: &lt;input type="text"&gt;&lt;/input&gt;&lt;/div&gt;

&lt;script type="text/javascript"&gt;
    var canvas = document.getElementById('canvas_picker').getContext('2d');

    // 创建一个 image 对象
    var img = new Image();
    img.src = 'image.jpg';

    // 把图片设置到Canvas中
    $(img).load(function(){
        canvas.drawImage(img,0,0);
    });

    // RGB 转换成 HEX
    function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}
    function toHex(n) {
         n = parseInt(n,10);
         if (isNaN(n)) return "00";
         n = Math.max(0,Math.min(n,255));
         return "0123456789ABCDEF".charAt((n-n%16)/16)  + "0123456789ABCDEF".charAt(n%16);
    }
    $('#canvas_picker').click(function(event){
        // 获取用户点击坐标
        var x = event.pageX - this.offsetLeft;
        var y = event.pageY - this.offsetTop;
        // 获取 RGB 值
        var img_data = canvas.getImageData(x, y, 1, 1).data;
        var R = img_data[0];
        var G = img_data[1];
        var B = img_data[2];  var rgb = R + ',' + G + ',' + B;
        // RGB 转成 HEX
        var hex = rgbToHex(R,G,B);
        // 显示颜色值
        $('#rgb input').val(rgb);
        $('#hex input').val('#' + hex);
    });
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>总结</h3>

<p>通过本事例我们应该意识到使用 Canvas 创建应用有很大的潜力；在其他地方有很多更好的例子，甚至很多人用Canvas 做游戏，Canvas 的巨大潜能等待你的挖掘。</p>

<h3>原文地址</h3>

<p><a href="http://www.webdesignerdepot.com/2013/03/how-to-create-a-color-picker-with-html5-canvas/">How to create a color picker with HTML5 Canvas</a></p>
]]></content>
  </entry>
  
</feed>
