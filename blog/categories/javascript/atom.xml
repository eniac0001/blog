<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | WOERWOSI]]></title>
  <link href="http://eniac0001.github.io/blog/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://eniac0001.github.io/blog/"/>
  <updated>2014-02-19T08:16:07+08:00</updated>
  <id>http://eniac0001.github.io/blog/</id>
  <author>
    <name><![CDATA[VictoryZhang(CN)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript 中“闭包”浅析]]></title>
    <link href="http://eniac0001.github.io/blog/blog/2013/05/17/javascript-closure/"/>
    <updated>2013-05-17T19:07:00+08:00</updated>
    <id>http://eniac0001.github.io/blog/blog/2013/05/17/javascript-closure</id>
    <content type="html"><![CDATA[<blockquote><p>闭包(Closure)是 JavaScript 的一大特色，也是一大难点，很多高级应用中需要深入理解闭包，才能写出高效的程序；本文依据作者所看过的资料，根据自己的理解来阐述 JavaScript 中的“闭包”。如文章中有错误或不恰当之处，望不吝赐教！</p></blockquote>

<h3>JavaScript 中为什么需要“闭包”</h3>

<p>要理解 JavaScript 中为什么需要闭包，需要先掌握 JavaScript 中“变量的作用域”问题：</p>

<pre><code>var global = 10;
function fun1(){
    var num = 100;
    console.log(global);   //10
    console.log(num);      //100
}
fun1();
console.log(global);       //10
console.log(num);          //ERROR : num is not defined 
</code></pre>

<p>“变量的作用域”无非就两种：全局作用域和局部作用域；根据变量的作用域可知，函数内部可以直接读取全局变量，而函数外部无法读取函数内的局部变量（因为在一个函数执行完毕以后，函数所依赖的执行空间会被回收，函数内部的局部变量也被销毁）；虽然可以通过函数的返回值得到一个函数内部变量的值，但有多个变量时我们无法下手，并且我们得到的并不是局部变量本身，而是局部变量在函数内部运行后的值。</p>

<p>我们有时需要得到函数内部的局部变量，因此这就引出一个问题：如何读取函数内部的局部变量？</p>

<p>例如以下一段代码:</p>

<pre><code>function fun1(){
    var num = 100;
    function fun2(){
        var num2 = 1000;
        console.log(num);    //100;
    }
    console.log(num2);       //ERROR : num is not defined 
}
</code></pre>

<p>有过丁点编程经验的人都应该明白，在上述代码中，函数 fun2() 理所当然能够得到变量 num 的值，fun1() 不能取得 fun2() 内部定义的局部变量，这一点，我们在后面会通过 JavaScript 的“作用域链”给出解释；</p>

<p>再来看一段代码：</p>

<pre><code>function fun1(){
    var num1 = 100;
    var num2 = 200;
    function fun2(){
        console.log(num1);     //100
        console.log(num2);     //200
    }
    return fun2;
}

var num = fun1();
num();
</code></pre>

<p>上述代码显示：fun2() 访问了定义在 fun1() 中的两个变量，即说明 fun2() 能够读取 fun1() 定义的局部变量；为了读取函数内部的局部变量，我们在函数内部又定义了一个函数，我们就把 fun2() 这样的函数称之为“闭包”；</p>

<h3>闭包的定义</h3>

<p>专业文献上的“闭包”（closure）定义非常抽象，很难看懂。</p>

<p>可以根据上述定义把闭包描述为：闭包就是能够读取其他函数内部变量的函数。</p>

<p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成：定义在一个函数内部的函数。</p>

<h3>闭包的用途</h3>

<p>闭包常见的两大用途：一是可以读取函数内部的变量，一是让这些变量的值始终保持在内存中。</p>

<p>要理解第二句话，看下面一段代码：</p>

<pre><code>function fun1(){
    var num = 999;
    numAdd = function(){num+=1;}
    function fun2(){
        alert(num);
    }
    return fun2;
}
var result=fun1();
result();        // 999
numAdd();
result();        // 1000
</code></pre>

<p>在这段代码中，result 实际上就是闭包 fun2 函数。它一共运行了两次，第一次的值是 999，第二次的值是 1000。这证明了，函数 fun1 中的局部变量 num 一直保存在内存中，并没有在 fun1 调用后被自动清除。</p>

<p>为什么会这样呢？原因就在于 fun1 是 fun2 的父函数，而 fun2 被赋给了一个全局变量，这导致 fun2 始终在内存中，而 fun2 的存在依赖于 fun1 ，因此 fun1 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p>

<p>这段代码中另一个值得注意的地方，就是 “numAdd=function(){num+=1}” 这一行，首先在 nAdd 前面没有使用 var 关键字，因此 numAdd 是一个全局变量，而不是局部变量。其次，numAdd 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 numAdd 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p>

<h3>待续......</h3>
]]></content>
  </entry>
  
</feed>
