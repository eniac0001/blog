<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Victory's Blog]]></title>
  <link href="http://eniac0001.github.io/blog/atom.xml" rel="self"/>
  <link href="http://eniac0001.github.io/blog/"/>
  <updated>2013-05-17T23:02:44+08:00</updated>
  <id>http://eniac0001.github.io/blog/</id>
  <author>
    <name><![CDATA[VictoryZhang(CN)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[译文] 使用 HTML5 Canvas 创建一个拾色器]]></title>
    <link href="http://eniac0001.github.io/blog/blog/2013/05/17/color-picker-canvas/"/>
    <updated>2013-05-17T21:47:00+08:00</updated>
    <id>http://eniac0001.github.io/blog/blog/2013/05/17/color-picker-canvas</id>
    <content type="html"><![CDATA[<blockquote><p>创建 Canvas 应用是一件有意思且新奇的事情，甚至可以创建游戏；Canvas 在大多数的桌面和手机浏览器中都能够很好的支持，是比使用 Flash 更可行的解决方案；</p></blockquote>

<p>本例中使用HTML5中 Canvas 来创建一个简易的拾色器（color picker），在此过程中，不需要任何的 Flash，有一个“文本编辑器”和一个“浏览器”即可。</p>

<p>开始之前，您可以在“<a href="http://netdna.webdesignerdepot.com/uploads7/how-to-create-a-color-picker-with-html5-canvas/demo/"><strong>这里</strong></a>”看看我们将要创建的应用的效果，您也可以在“<a href="http://netdna.webdesignerdepot.com/uploads7/how-to-create-a-color-picker-with-html5-canvas/demo/demo.zip"><strong>这里</strong></a>”下载源文件。
<em>如果您在本地测试这个实例，最好不要使用 Chrome 浏览器，因为 Chrome 的安全模块要求 script 只在线上工作（only work online）。</em></p>

<h3>HTML</h3>

<p>在这个例子中，HTML 使用的不多，我们需要做的就是创建<strong>一个Canvas</strong>，然后有<strong>两个文本框</strong>用于放置所点击颜色的 RGB 表示和 16 进制颜色值表示；代码如下:</p>

<pre><code>&lt;canvas width="600" height="440" id="canvas_picker"&gt;&lt;/canvas&gt;
&lt;div id="hex"&gt;HEX: &lt;input type="text"&gt;&lt;/input&gt;&lt;/div&gt;
&lt;div id="rgb"&gt;RGB: &lt;input type="text"&gt;&lt;/input&gt;&lt;/div&gt;
</code></pre>

<p>由于我们在一张背景图片拾取颜色，因此把 Canvas 的高度和宽度设置成了背景图片的高度和宽度；所点击的颜色显示在两个文本框中；</p>

<p>由于我们要用到 jQuery，因此代码中要包含jQuery库。</p>

<h3>JavaScript</h3>

<p>要使拾色器工作，首先，我们需要做的是获取 Canvas 和它的上下文，我们可以用一句代码，像这样：</p>

<pre><code>var canvas = document.getElementById('canvas_picker').getContext('2d');
</code></pre>

<p>紧接着，我们需要做的就是给 Canvas 元素设置一张背景图片，此过程中，我们需要创建一个 image 对象，并设置其 URL 属性，当图片加载完毕后，加载到 Canvas 中，代码如下：</p>

<pre><code>var img = new Image();
img.src = 'image.jpg';
$(img).load(function(){
    canvas.drawImage(img,0,0);
});
</code></pre>

<p>下面我们应该考虑的是：当鼠标点击事件在 Canvas 中发生时，我们应该捕捉到该事件，并且获取用户点击鼠标的位置，代码可以这样写：</p>

<pre><code>$('#canvas_picker').click(function(event){
    var x = event.pageX - this.offsetLeft;
    var y = event.pageY - this.offsetTop;
});
</code></pre>

<p>这两句代码的意思是获取用户点击的位置，我们所需做的就是获取其坐标，并减去 Canvas 元素的偏移量(offsetLeft 和 offsetTop)； 这样就得到了相对于 Canvas 用户点击的位置；</p>

<p>下一步就是获取用户点击位置的 RGB 值，我们需要用到 getImageData() 函数，并把上面代码中 x，y 值传递进去：</p>

<pre><code>$('#canvas_picker').click(function(event){
    var x = event.pageX - this.offsetLeft;
    var y = event.pageY - this.offsetTop;

    var imgData = canvas.getImageData(x, y, 1, 1).data;
    var R = imgData[0];
    var G = imgData[1];
    var B = imgData[2];

});
</code></pre>

<p>接下来就是把 RGB 值显示给用户：</p>

<pre><code>$('#canvas_picker').click(function(event){
    var x = event.pageX - this.offsetLeft;
    var y = event.pageY - this.offsetTop;

    var imgData = canvas.getImageData(x, y, 1, 1).data;
    var R = imgData[0];
    var G = imgData[1];
    var B = imgData[2];

    var rgb = R + ',' + G + ',' + B;
    $('#rgb input').val(rgb);

});
</code></pre>

<p>现在已经可以得到用户点击位置的 RGB 值，不过，为了有更好的体验，我们同时显示点击位置的 16 进制值颜色值，把 RGB 值转换为 16 进制颜色值的代码如下：</p>

<pre><code>function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}
function toHex(n) {
    n = parseInt(n,10);
    if (isNaN(n)) 
        return "00";
    n = Math.max(0,Math.min(n,255));
    return "0123456789ABCDEF".charAt((n-n%16)/16) + "0123456789ABCDEF".charAt(n%16);
}
</code></pre>

<p>我们已经完成了本例子的大部分功能，下面就是把16进制颜色值显示在文本框中：</p>

<pre><code>var hex = rgbToHex(R,G,B);
$('#hex input').val('#' + hex);
</code></pre>

<h3>完整代码</h3>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;拾色器事例代码&lt;/title&gt;
    &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;canvas width="600" height="440" id="canvas_picker"&gt;&lt;/canvas&gt;
&lt;div id="hex"&gt;HEX: &lt;input type="text"&gt;&lt;/input&gt;&lt;/div&gt;
&lt;div id="rgb"&gt;RGB: &lt;input type="text"&gt;&lt;/input&gt;&lt;/div&gt;

&lt;script type="text/javascript"&gt;
    var canvas = document.getElementById('canvas_picker').getContext('2d');

    // 创建一个 image 对象
    var img = new Image();
    img.src = 'image.jpg';

    // 把图片设置到Canvas中
    $(img).load(function(){
        canvas.drawImage(img,0,0);
    });

    // RGB 转换成 HEX
    function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}
    function toHex(n) {
         n = parseInt(n,10);
         if (isNaN(n)) return "00";
         n = Math.max(0,Math.min(n,255));
         return "0123456789ABCDEF".charAt((n-n%16)/16)  + "0123456789ABCDEF".charAt(n%16);
    }
    $('#canvas_picker').click(function(event){
        // 获取用户点击坐标
        var x = event.pageX - this.offsetLeft;
        var y = event.pageY - this.offsetTop;
        // 获取 RGB 值
        var img_data = canvas.getImageData(x, y, 1, 1).data;
        var R = img_data[0];
        var G = img_data[1];
        var B = img_data[2];  var rgb = R + ',' + G + ',' + B;
        // RGB 转成 HEX
        var hex = rgbToHex(R,G,B);
        // 显示颜色值
        $('#rgb input').val(rgb);
        $('#hex input').val('#' + hex);
    });
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>总结</h3>

<p>通过本事例我们应该意识到使用 Canvas 创建应用有很大的潜力；在其他地方有很多更好的例子，甚至很多人用Canvas 做游戏，Canvas 的巨大潜能等待你的挖掘。</p>

<h3>原文地址</h3>

<p><a href="http://www.webdesignerdepot.com/2013/03/how-to-create-a-color-picker-with-html5-canvas/">How to create a color picker with HTML5 Canvas</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 中“闭包”浅析]]></title>
    <link href="http://eniac0001.github.io/blog/blog/2013/05/17/javascript-closure/"/>
    <updated>2013-05-17T19:07:00+08:00</updated>
    <id>http://eniac0001.github.io/blog/blog/2013/05/17/javascript-closure</id>
    <content type="html"><![CDATA[<blockquote><p>闭包(Closure)是 JavaScript 的一大特色，也是一大难点，很多高级应用中需要深入理解闭包，才能写出高效的程序；本文依据作者所看过的资料，根据自己的理解来阐述 JavaScript 中的“闭包”。如文章中有错误或不恰当之处，望不吝赐教！</p></blockquote>

<h3>JavaScript 中为什么需要“闭包”</h3>

<p>要理解 JavaScript 中为什么需要闭包，需要先掌握 JavaScript 中“变量的作用域”问题：</p>

<pre><code>var global = 10;
function fun1(){
    var num = 100;
    console.log(global);   //10
    console.log(num);      //100
}
fun1();
console.log(global);       //10
console.log(num);          //ERROR : num is not defined 
</code></pre>

<p>“变量的作用域”无非就两种：全局作用域和局部作用域；根据变量的作用域可知，函数内部可以直接读取全局变量，而函数外部无法读取函数内的局部变量（因为在一个函数执行完毕以后，函数所依赖的执行空间会被回收，函数内部的局部变量也被销毁）；虽然可以通过函数的返回值得到一个函数内部变量的值，但有多个变量时我们无法下手，并且我们得到的并不是局部变量本身，而是局部变量在函数内部运行后的值。</p>

<p>我们有时需要得到函数内部的局部变量，因此这就引出一个问题：如何读取函数内部的局部变量？</p>

<p>例如以下一段代码:</p>

<pre><code>function fun1(){
    var num = 100;
    function fun2(){
        var num2 = 1000;
        console.log(num);    //100;
    }
    console.log(num2);       //ERROR : num is not defined 
}
</code></pre>

<p>有过丁点编程经验的人都应该明白，在上述代码中，函数 fun2() 理所当然能够得到变量 num 的值，fun1() 不能取得 fun2() 内部定义的局部变量，这一点，我们在后面会通过 JavaScript 的“作用域链”给出解释；</p>

<p>再来看一段代码：</p>

<pre><code>function fun1(){
    var num1 = 100;
    var num2 = 200;
    function fun2(){
        console.log(num1);     //100
        console.log(num2);     //200
    }
    return fun2;
}

var num = fun1();
num();
</code></pre>

<p>上述代码显示：fun2() 访问了定义在 fun1() 中的两个变量，即说明 fun2() 能够读取 fun1() 定义的局部变量；为了读取函数内部的局部变量，我们在函数内部又定义了一个函数，我们就把 fun2() 这样的函数称之为“闭包”；</p>

<h3>闭包的定义</h3>

<p>专业文献上的“闭包”（closure）定义非常抽象，很难看懂。</p>

<p>可以根据上述定义把闭包描述为：闭包就是能够读取其他函数内部变量的函数。</p>

<p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成：定义在一个函数内部的函数。</p>

<h3>闭包的用途</h3>

<p>闭包常见的两大用途：一是可以读取函数内部的变量，一是让这些变量的值始终保持在内存中。</p>

<p>要理解第二句话，看下面一段代码：</p>

<pre><code>function fun1(){
    var num = 999;
    numAdd = function(){num+=1;}
    function fun2(){
        alert(num);
    }
    return fun2;
}
var result=fun1();
result();        // 999
numAdd();
result();        // 1000
</code></pre>

<p>在这段代码中，result 实际上就是闭包 fun2 函数。它一共运行了两次，第一次的值是 999，第二次的值是 1000。这证明了，函数 fun1 中的局部变量 num 一直保存在内存中，并没有在 fun1 调用后被自动清除。</p>

<p>为什么会这样呢？原因就在于 fun1 是 fun2 的父函数，而 fun2 被赋给了一个全局变量，这导致 fun2 始终在内存中，而 fun2 的存在依赖于 fun1 ，因此 fun1 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p>

<p>这段代码中另一个值得注意的地方，就是 “numAdd=function(){num+=1}” 这一行，首先在 nAdd 前面没有使用 var 关键字，因此 numAdd 是一个全局变量，而不是局部变量。其次，numAdd 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 numAdd 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p>

<h3>待续&#8230;&#8230;</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[脚本异步加载、顺序执行技术(临时稿)]]></title>
    <link href="http://eniac0001.github.io/blog/blog/2013/04/23/js-ansy-load/"/>
    <updated>2013-04-23T16:01:00+08:00</updated>
    <id>http://eniac0001.github.io/blog/blog/2013/04/23/js-ansy-load</id>
    <content type="html"><![CDATA[<h3>无阻塞加载脚本</h3>

<p>（1）XHR Eval 技术：该技术主要通过 XMLHttpRequest 对象从服务器端获取脚本</p>

<pre><code>var xhrObject = getXHRObject();

xhrObject.onreadystatechange = function(){
    if(xhrObject.readyState == 4 &amp;&amp; 200 == xhrObject.status){
        //响应完成时，通过 eval() 执行内容
        eval(xhrObject.responseText);
    }
};

//必须和主页面在一个域中
xhrObject.open('GET', 'A.js', true);
xhrObject.send('');

//获取 XMLHttpRequest 对象
function getXHRObject(){
    var xhrObject = false ;
    try {
        xhrObject = new XMLHttpRequest();
    }
    catch(e){
        var progid = ['MSXML2.XMLHTTP.5.0', 
                      'MSXML2.XMLHTTP.4.0', 
                      'MSXML2.XMLHTTP.3.0', 
                      'MSXML2.XMLHTTP', 
                      'Microsoft.XMLHTTP'];
        for(var i=0; i &lt; progid.length; ++i){
            try {
                xhrObject = new ActiveXObject(progid[i]);
            }
            catch(e){
                continue ;
            }
            break;
        }
    }
    finally {
        return xhrObject;
    }
}
</code></pre>

<p>（2）XHR 注入 技术：也是通过 XMLHttpRequest 对象从服务器端获取脚本，与 eval 不同的是：该机制通过创建一个 script 的 DOM 元素，然后把 XMLHttpRequest 的响应注入到 script 中来执行 javascript 的；</p>

<pre><code>var xhrObject = getXHRObject();

xhrObject.onreadystatechange = function(){
    if(xhrObject.readyState == 4){
        var scriptElem = document.createElement('script');
        document.getElementsByTagName('head')[0].appendChild(scriptElem);
        scriptElem.text = xhrobject.responseText;
    }
};

//必须和主页面在一个域中
xhrObject.open('GET', 'A.js', true);
xhrObject.send('');
</code></pre>

<h3>异步加载脚本时，如何保持执行顺序问题</h3>

<h5>1、异步加载脚本时，单个外部脚本和行内代码执行顺序解决方案</h5>

<p>（1）Script Onload 技术</p>

<pre><code>采用 Script DOM Element 作为异步加载技术

&lt;script type="text/javascript"&gt;

var aExamples = [['couple-normal.php', 'Normal Script Src'], ...];

function init() {
    EFWS.Menu.createMenu('examplesbtn', aExamples);
}

var domscript = document.createElement('script');
// menu.js 提供生成下拉菜单的功能
domscript.src = "menu.js";
domscript.onloadDone = false;   //防止 Opera 被执行两次
domscript.onload = function(){
    domscript.onloadDone = true;
    init();
};
domscript.onreadystatechange = function(){
    if(("loaded" === domscript.readyState || "complete" === domscript.readyState)&amp;&amp; !domscript.onloadDone){
        domscript.onloadDone = true;
        init();
    }
};

document.getElementsByTagName('head')[0].appendChild(domscript);

&lt;/script&gt;
</code></pre>

<h5>2、异步加载脚本时，多个外部脚本和行内代码执行顺序解决方案</h5>

<p>（1）Managed XHR 技术</p>

<p>（2）DOM Element 和 Document.write 技术</p>

<h3>综合解决方案</h3>

<p>（1）单个脚本</p>

<p>说明：异步加载单个脚本的最佳技术是：Script DOM Element，Script Onload 是整合单个外部脚本和行内脚本的最好选择；</p>

<p>（2）多个脚本</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何编写 jQuery 插件]]></title>
    <link href="http://eniac0001.github.io/blog/blog/2013/04/19/jqueryplugin/"/>
    <updated>2013-04-19T17:09:00+08:00</updated>
    <id>http://eniac0001.github.io/blog/blog/2013/04/19/jqueryplugin</id>
    <content type="html"><![CDATA[<h3>认识几款基于 jQuery 的插件</h3>

<ul>
<li><a href="http://simplemodal.plasm.it/">SimpleModal</a>：为模态窗口开发提供接口；</li>
<li><a href="http://www.aqee.net/docs/jquery.form.plugin/jquery.form.plugin.html">Form</a>：是一款Ajax表单插件；</li>
<li><a href="http://www.lazyload.com/">LazyLoad</a>：通过延迟加载来实现按需加载，达到节省资源，加快浏览速度的目的;</li>
<li><a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation/">Validation</a>：表单验证插件;</li>
<li><a href="http://jqueryui.com/">jQueryUI</a>：jQuery用户界面插件；</li>
</ul>


<h3>jQuery 插件的种类</h3>

<ol>
<li>封装对象方法的插件：用于通过选择器获取的jQuery对象进行操作(最为常见)；</li>
<li>封装全局函数的插件：将独立的函数加到jQuery命名空间下；</li>
<li>选择器插件：扩充自己喜欢的选择器；</li>
</ol>


<p>主要就是这三种插件比较常用。</p>

<p>jQuery.fn.extend()和jQuery.extend() 是用于扩展 jQuery 功能的两个方法；</p>

<p>其中：</p>

<blockquote><p>jQuery.fn.extend()用于扩展第一种类型的插件，jQuery.extend()用于扩展后两种类型的插件；这两个方法都有一个参数，类型为 Object, Object 对象的“名/值对”分别代表“函数或方法名/函数主体”；</p></blockquote>

<p>jQuery.extend() 还可以扩展已有的 Object 对象；</p>

<pre><code>jQuery.extend(target,obj1,...objN) 

//用一个或多个其他对象扩展一个对象，然后返回被扩展的对象；

例如：
var setting = {validate:false, limit:5, name:"foo"};
var option = {validate:true, name:"bar"};
var newOption = jQuery.extend(setting, option);

结果为：
newOption = {validate:true, limit:5, name:"bar"};
</code></pre>

<p>jQuery.extend() 还可用来设置插件方法的默认参数：</p>

<pre><code>例如：
function foo(option){
    option = jQuery.extend({
        name:"bar",
        length：5，
        dateType:"xml"
    }, option);
};

调用方法如下：
foo({name:"a", length:4， dataType:"json"});
...
foo(name:"a");
foo();
注：传入的是映射而不是参数列表；
</code></pre>

<h3>封装插件时的注意事项：</h3>

<ul>
<li>jQuery插件的命名：一般采用<strong>jQuery.插件名.js</strong>，以免和其他js插件冲突；</li>
<li>所有的对象方法都应附加到 jQuery.fn 对象上，所有的全局函数都应附加到 jQuery 对象本身上</li>
<li>在插件内部，this 指向的是当前通过选择器获取的 jQuery 对象上，而不是 DOM 元素；</li>
<li>可以通过 this.each 遍历所有元素；</li>
<li>所有的方法或函数插件，都应以分好结尾，避免压缩的时候出现问题，甚至应该在插件头部加上分号，避免别人的不规范给插件带来影响；</li>
<li>插件应该返回一个 jQuery 对象，以保证插件的可链式操作，除非插件需要返回的是一些需要获取的量，例如字符串或者数组等；</li>
<li>避免在插件内部使用 $ 作为 jQuery 对象的别名，应使用完整的 jQuery 来表示，以避免冲突；可以利用<strong>闭包</strong>来回避这个问题；</li>
</ul>


<blockquote><p>闭包问题：</p>

<p>(ECMAScript)允许使用内部函数，且内部函数可以访问他们所在的外部函数中声明的所有局部变量、参数和其它内部函数，当其中一个这样的内部函数在包含它们的外部函数之外被调用时，就会形成闭包；</p>

<p>利用闭包的特性，既可以避免内部临时变量影响全局空间，又可以在插件内部继续使用 $ 作为 jQuery 的别名；</p></blockquote>

<p>常见的 jQuery 插件的结构：</p>

<pre><code>//; 作用是更好的兼容性
;(function($){
    //这里放置代码
})(jQuery);     //jQuery 作为实参传递进去
</code></pre>

<h3>编写 jQuery 插件实例</h3>

<blockquote><p>注：在此利用封装 jQuery 对象方法编写一个颜色插件，有两个功能：</p>

<p>一是设置匹配元素的颜色；</p>

<p>一是获取匹配元素（元素集合中的第一个）的颜色。</p></blockquote>

<p>把此插件命名为 jquery.color.js;</p>

<p>首先采用扩展第一类插件的方法进行编写，代码如下:</p>

<pre><code>;(function($){

    $.fn.extend({

        "color" : function(value){
            //这里编写插件代码
            //若提供 value 值，则是设置颜色，否则是获取颜色
        }

    });

})(jQuery);
</code></pre>

<p>下面实现第一个功能，设置颜色；代码如下</p>

<pre><code>;(function($){

    $.fn.extend({

        "color" : function(value){

            //this 指向 jQuery 对象
            //使用 return 是要保证其具有可链接性
            //css() 会返回调用它的对象，在此为 this
            return this.css("color", value);

        }

    });

})(jQuery);
</code></pre>

<p>接着实现第二个功能，获取匹配元素集合中第一个元素的颜色；代码如下：</p>

<pre><code>;(function($){

    $.fn.extend({

        "color" : function(value){

            if(value == undefined)
            {
                //css() 本身具有返回第一个匹配元素的样式值的功能，无需使用 eq()
                return this.css("color");
            }
            else
            {
                return this.css("color", value);
            }

        }

    });

})(jQuery);
</code></pre>

<p>至此，两个功能都已实现；下面着手优化一下：</p>

<pre><code>;(function($){

    $.fn.extend({

        "color" : function(value){

            //css() 具有判断 value 是否为 undefined 的机制，所以可以根据不同的
            //传递参数而返回不同的值；
            return this.css("color", value);

        }

    });

})(jQuery);
</code></pre>

<p>到此，此插件已完成，可自行实验一下。</p>

<p>定义一组插件，可使用如下形式：</p>

<pre><code>;(function($){

    $.fn.extend({

        "color" : function(value){

        }，
        "border" : function(value){
        },
        ...
        "background" : function(value){
        }     //最后一个没有逗号

    });

})(jQuery);
</code></pre>

<h3>参考文献</h3>

<ol>
<li><p>锋利的jQuery(第二版)</p></li>
<li><p><a href="http://www.cnblogs.com/JustinYoung/archive/2010/03/30/jquery-chajian.html">跟我一起学写jQuery插件</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于本博客的几点声明]]></title>
    <link href="http://eniac0001.github.io/blog/blog/2013/04/18/aboutblog/"/>
    <updated>2013-04-18T15:13:00+08:00</updated>
    <id>http://eniac0001.github.io/blog/blog/2013/04/18/aboutblog</id>
    <content type="html"><![CDATA[<ol>
<li>本博客托管到 <a href="http://github.com" title="Github">Github</a> 上，空间和域名解析服务有 Github 提供支持;</li>
<li>本博客系统源码有 <a href="http://octopress.org">Octopress</a> 友情奉献;</li>
<li>本博客主题有 <a href="http://shashankmehta.in/archive/2012/greyshade.html">GreyShade</a> 无偿提供；</li>
<li>评论模块有 <a href="http://duoshuo.com">多说</a> 提供支持；</li>
<li>在此对 “Github、Octopress、GreyShade、多说” 表示感谢；</li>
</ol>


<p>本博客其他地方若涉及到以上内容，均不再作出说明。&circ;&ndash;&circ;</p>
]]></content>
  </entry>
  
</feed>
